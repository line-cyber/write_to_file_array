// Inhearitance_Array.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <algorithm>
#include <math.h>
#include <iostream>
#include <fstream>
#include <iomanip>


using namespace std;

class MyArrayParent
{
protected:

	int capacity;       //сколько памяти выделено?
	int count;          //количество элементов - сколько памяти используем
	double* ptr;        //массив

public:

	MyArrayParent(int Dimension = 100)      //конструкторы
	{

		ptr = new double[Dimension];
		capacity = Dimension;
		count = 0;

		cout << "\nMyArrayParent constructor\t" << this << endl;
	}

	MyArrayParent(double* arr, int len) //конструктор принимает существующий массив
	{
		this->ptr = arr;
		count = len;

		cout << "\nMyArrayParent constructor" << this << endl;      //заполнить массив ptr, заполнить поля
	}


	~MyArrayParent()                             //деструктор
	{
		cout << "\nMyArrayParent destructor\t" << this << endl;
		if (ptr != NULL)
		{
			delete[] ptr;
			ptr = NULL;
		}
	}

	int Capacity()        //обращение к полям
	{
		return capacity;
	}
	int Size()
	{
		return count;
	}

	double GetComponent(int index)
	{
		if (index >= 0 && index < count)
			return ptr[index];
		if (index < 0 || index >= count)
			throw index;

		//return -1;
	}

	void SetComponent(int index, double value)
	{
		if (index >= 0 && index < count)
			ptr[index] = value;
		if (index < 0 || index >= count)
			throw exception("the index is wrong");
		//сгенерировать исключение, если индекс неправильный
	}


	virtual void AddValue(double value)            //добавление в конец нового значения
	{
		if (count < capacity)
		{
			ptr[count] = value;
			count++;
		}
		else
		{
			double *new_arr = new double[count + 1];
			for (int i = 0; i < count; i++)
				new_arr[i] = ptr[i];
			new_arr[count++] = value;
			delete[]ptr;

			ptr = new_arr;
		}

	}

	void RemoveLastValue()                          //удаление элемента с конца
	{
		if (count >= 0)
		{
			count--;
			double *arr = new double[count];
			for (int i = 0; i < count; i++)
				arr[i] = ptr[i];
			delete[]ptr;
			ptr = arr;
		}

	}
	double& operator[](int index)          //перегрузка оператора []
	{
		return ptr[index];
	}

	MyArrayParent& operator = (const MyArrayParent& V)
	{
		cout << "\nOperator = " << this << endl;

		this->count = V.count;
		if (this->ptr != nullptr)
		{
			delete[] this->ptr;
		}

		this->ptr = new double[V.count]; //новый массив в области памяти

		for (int i = 0; i < V.count; i++)
		{
			this->ptr[i] = V.ptr[i];
		}

		return *this;
	}

	MyArrayParent(const MyArrayParent& V)
	{
		ptr = new double[V.count];
		count = V.count;
		capacity = count;
		for (int i = 0; i < V.count; i++)
		{
			this->ptr[i] = V.ptr[i];
		}

		cout << "\nCopy constructor\t" << this << endl;

	};

	void print()                    //базовый класс
	{
		cout << "\nMyArrParent, size: " << count << ", values: {";
		int i = 0;
		for (i = 0; i < count; i++)
		{
			cout << ptr[i];
			if (i != count - 1)
				cout << ", ";
		}
		cout << "}" << endl;
	}

	friend ostream &operator << (ostream &ustream, MyArrayParent& obj);
	friend istream &operator >> (istream &ustream, MyArrayParent& obj);
};

 ostream &operator << (ostream &ustream, MyArrayParent& obj)
{
	// cout << typeid(ustream).name();
	 if (typeid(ustream).name() == typeid(ofstream).name())
	 {
		 ustream << obj.count << "\n";

		 for (int i = 0; i < obj.count; i++)
		 {
			 ustream << obj[i] << "\n";
		 }
		 return ustream;
	 }
	 else
	 {
		 ustream <<"Size: "<< obj.count << "\n";
		 for (int i = 0; i < obj.count; i++)
		 {
			 ustream << "arr[" << i << "] = " << obj.ptr[i] << "\n";
		 }
		 return ustream;
	 }
 };
 istream &operator >> (istream &ustream, MyArrayParent& obj) 
 {
	 int size;
	 ustream >> size;

	 if (size > obj.capacity)
	 {
		 throw exception("the index is not okay");
	 }

	 obj.count=0;
	 double value;

	 for (int i = 0; i < size; i++)
	 {
		 ustream >> value;
		 obj.AddValue(value);
	 }
	 return ustream;
 };

 ostream& my_manip(ostream& ustream)
 {
	 ustream.width(5);
	 //ustream.fill('$');
	 return ustream;
 }

class MyArrayChild : public MyArrayParent
{
public:
	//используем конструктор родителя. 
	MyArrayChild(int Dimension = 100) : MyArrayParent(Dimension)
	{
		cout << "\nMyArrayChild constructor\t" << this << endl;
	}

	~MyArrayChild()
	{
		cout << "\nMyArrayChild destructor \t" << this << endl;
	}

	void RemoveAt(int index = -1) //удаление элемента
	{
		if (index >= count)
			throw exception("The index is not find");
		else
		{
			for (int i = index; i < count - 1; i++)
				ptr[i] = ptr[i + 1];
			--count;
		}
	}

	virtual int IndexOf(double value)   //поиск элемента
	{

		int index;
		int k;
		for (int i = 0; i < count; i++)
		{
			if (value == ptr[i])
				index = i;

		}
		if (index >= 0) return index;
		else return -1;

	}

	virtual void InsertAt(double value, int index = -1)           //вставка элемента
	{
		if (index >= count)
			throw exception("The index is not okay");
		else
		{
			int size = count;
			for (int i = size; i > index; i--)
				ptr[i] = ptr[i - 1];
			ptr[index] = value;
		}
	}

	void AddLastValue(double value)               //добавление элемента в конец
	{
		if (count >= 0)
		{
			double *arr = new double[count + 1];
			for (int i = 0; i < count; i++)
				arr[i] = ptr[i];
			arr[count++] = value;
			delete[]ptr;
			ptr = arr;
		}
	}
	double maxmin()
	{
		int i;
		int max = 0;
		int min = 0;
		double res = 0;
		for (i = 1; i < count; i++)
		{
			if (ptr[i] > ptr[max]) max = i;
			else if (ptr[i] < ptr[min]) min = i;
		}
		res = ptr[min] - ptr[max];


		return res;
	}
	void print()
	{
		cout << "\nMyArrChild, size: " << count << ", values: {";
		int i = 0;
		for (i = 0; i < count; i++)
		{
			cout << ptr[i];
			if (i != count - 1)
				cout << ", ";
		}
		cout << "}" << endl;
	}
};


class MySortedArray : public MyArrayChild
{
public:

	MySortedArray(int Dimension = 100) : MyArrayChild(Dimension)
	{
		cout << "\nMySortedArray constructor\t" << this << endl;
	}

	double FindMedian()
	{
		sort(ptr, ptr + count);
		/*cout << "Sorted array: ";
		 print();*/
		if (count % 2 != 0)
			return (double)ptr[count / 2];

		else return (double)(ptr[(count - 1) / 2] + ptr[count / 2]) / 2.0;

	}

	virtual int IndexOf(double value)
	{
		bool flag = false;
		int l = 0;
		int r = count - 1;
		int mid;
		while ((l <= r) && (flag != true))
		{
			mid = (l + r) / 2;

			if (ptr[mid] == value) flag = true;
			if (ptr[mid] > value) r = mid - 1;
			else l = mid + 1;
		}

		if (flag)
			return mid;
		else return -1;
	}

	virtual void InsertAt(double value, int index = -1)
	{
		if (index >= count)
			throw exception("The index is not okay");
		else
		{
			bool flag = false;
			int l = 0;
			int r = count - 1;
			int mid;
			while ((l <= r) && (flag != true))
			{
				mid = (l + r) / 2;
				if (ptr[mid] < ptr[index])
					l = mid + 1;
				else r = mid - 1;
			}
			for (int j = count - 1; j >= l; j--)
				ptr[j + 1] = ptr[j];
			ptr[l] = value;
			count++;
		}
	}

	virtual void AddValue(double value)            //добавление в конец нового значения
	{

		if (count < capacity)
		{
			ptr[count] = value;
			count++;
		}
		else
		{
			double *new_arr = new double[count + 1];
			for (int i = 0; i < count; i++)
				new_arr[i] = ptr[i];
			new_arr[count++] = value;

			delete[]ptr;
			ptr = new_arr;
			//print();
		}

		sort(ptr, ptr + count);
		//MySortedArray_sort();
	}

	~MySortedArray()
	{
		cout << "\nMySortedArray destructor\t" << this << endl;
	}
	void print()
	{
		cout << "\nMySortedArr, size: " << count << ", values: {";
		int i = 0;
		for (i = 0; i < count; i++)
		{
			cout << ptr[i];
			if (i != count - 1)
				cout << ", ";
		}
		cout << "}" << endl;
	}
};

int main()
{
	if (true)
	{
		try
		{
			cout << "\nClass Parrent\n ";
			MyArrayParent arr;

			int i = 0;
			for (i = 0; i < 10; i++)
			{
				arr.AddValue(rand() % 43);
			}
			arr.print();
			
			ofstream fout; 
			fout.open("text.txt", ios::out);
			if (fout)
			{
				fout << arr;
				fout.close();
			}
			ifstream fin("text.txt");
			if (fin)
			{
				try
				{
					fin >> arr;
					fin.close();
					cout << my_manip << arr;
				}
				catch (const exception &exc)
				{
					cout << "Error: " << exc.what() << "\n";
				}
				catch (...)
				{
					cout << "\nException: failed to read file";
				}
			}

			MyArrayChild child;

			for (i = 0; i < 5; i++)
			{
				child.AddValue(rand() % 14);
			}
			child.print();

			ofstream fout1;
			fout1.open("text.txt", ios::out);
			if (fout1)
			{
				fout1 << child;
				fout1.close();
			}
			ifstream fin1("text.txt");
			if (fin1)
			{
				try
				{
					fin1 >> child;
					fin1.close();
					
					cout <<my_manip<< child;
					
				}

				catch (const exception &exc)
				{
					cout << "Error: " << exc.what() << "\n";
				}
				catch (...)
				{
					cout << "\nException: failed to read file";
				}
			}
			
			MySortedArray sort;
			for (i = 0; i < 10; i++)
			{
				sort.AddValue(rand() % 16);
			}
			sort.print();
			ofstream fout2;
			fout2.open("text.txt", ios::out);
			if (fout2)
			{
				fout2 << sort;
				fout2.close();
			}
			ifstream fin2("text.txt");
			if (fin2)
			{
				try
				{
					fin2 >> sort;
					fin2.close();
					cout << my_manip << sort;
				}
				catch (const exception &exc)
				{
					cout << "Error: " << exc.what() << "\n";
				}
				catch (...)
				{
					cout << "\nException: failed to read file";
				}
			}
			
		}
		

		catch (const exception &ex)
		{
			cout << "Error: " << ex.what() << endl;
		}
	}

	return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
